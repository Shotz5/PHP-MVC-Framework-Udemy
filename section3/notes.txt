================================================================================
Advanced Routing: Add Simpler but More Powerful Routes
================================================================================

--------------------------------------------------------------------------------
Into to Regex
--------------------------------------------------------------------------------

A regex defines a pattern of characters
    - Can match part of a string
    - Can be used for advances matching and replacing
        - Match or replace just numbers
        - See if a string contains a valid email address

Instead of comparing to fixed string, we compare to pattern
    - if ($name == "Dave") => if (preg_match("/Dave/", $name))

Regular expression:
    /abc/ => "abc" => Match
    /abc/ => "abcde" => Match
    /abc/ => "bcde" => No Match
    /2:3/ => "12:34:56" => Match

Matacharacters
    - Used to match a specific type of character
    - Common includes
        \d (digit from 0-9)
        \w (any character from a to z, A to Z, 0 to 9)
        \s (any whitespace character)

More regular expressions:
    /ab\d/ => "ab23" => Match
    /abc\d/ => "ab23" => No match
    /\d\d/ => "ab23" => Match
    /\w\s\d/ => "ab 34" => Match

--------------------------------------------------------------------------------
Using Special Characters in Regex
--------------------------------------------------------------------------------

- ^ - Start of string
- $ - End of string
    /^abc/ => "abc" => Match
    /^abc/ => "123abc" => Not Match
    /abc$/ => "123abc" => Match
    /^abc$/ => "abc" => Match
    /^abc$/ => "abcdef" =< Not match
- * - Look for character repeated 0 or more times
- + - Look for character repeated 1 or more times
    /a*bc/ => "abc" => Match
    /a+bc/ => "abc" => Match
    /a*bc/ => "bc" => Match
    /a+bc/ => "bc" => Not Match
    /a+bc/ => "aaaaaaabc" => Match
- . - match any single character: letter, number, whitespace, etc.
    /ab.de/ => "abcde" => Match
    /ab.de/ => "ab de" => Match
    /ab.de/ => "abde" => Not Match
    - .* - "Any number of any characters, including 0"
    /abc.*/ => "abcdef" => Match
    /abd.*/ => "abc" => Match
- \ - Match metacharacters by escaping them
    /abc./ => "abcd" => Match
    /abc\./ => "abcd" => Not match
- Patterns are case sensitive, adding the "i" modifier after the regex makes it insensitive
    /abc/ => "abc" => Match
    /abd/ => "Abc" => Not match
    /abc/i => "Abc" => Match

--------------------------------------------------------------------------------
Use Character Sets and Ranges in Regex
--------------------------------------------------------------------------------

- [] - Match one of any of the characters in the brackets
    /a[123]b/ => "a2b" => Match
    /a[123]b/ => "a4b" => Not Match
    /a[123]+b/ => "a321322b" => Match
    /a[1-5]b/ => "a2b" => Match
    /a[1-5]b/ => "a6b" => Not Match
    /[a-z0-9 ]+/ => "hello there" => Match
- [^ ] - Negate the character class: match any character except for the ones specified
    /a[^123]b/ => "a2b" => Not Match
    /a[^123]b/ => "a4b" => Match
    /[^a-z]+/ => "hello" => Not match
    /[^a-z]+/ => "HELLO" => Not match

--------------------------------------------------------------------------------
Extract Parts of Strings Using Regex Capture Groups
--------------------------------------------------------------------------------

- preg_match($reg_exp, $string, $matches)
    /a[123]+b/ => "a222b" => [ 0 => "a222b" ]
    /a([123]+)b/ => "a222b" => [ 0 => "a222b", 1 => "222" ]
    /([a-zA-Z]+) (\d+)/ => "Jan 1992" => [ 0 => "Jan 1992", 1 => "Jan", 2 => "1992" ]
- (?<name>regex) - Give the capture group a name
    /(?P<month>[a-zA-Z]+) (?P<year>\d+)/ => "Jan 1992" => [ 0 => "Jan 1992", "month" => "Jan", "year" => "1992" ]

--------------------------------------------------------------------------------
Get the Controller and Action from a URL with a Fixed Structure
--------------------------------------------------------------------------------

- Say all urls are of format:
    - daveh.io/<controller>/<action>
    - daveh.io
        - /^/
    - <controller>
        - /^[a-z-]+/
    - /
        - /^[a-z-]+\//
    - <action>
        - /^[a-z-]+\/[a-z-]+/
    - End of string
        - /^[a-z-]+\/[a-z-]+$/
    - Capture groups
        - /^(?P<controller>[a-z-]+)\/(?P<action>[a-z-]+)$/

--------------------------------------------------------------------------------
Replace parts of strings using regex
--------------------------------------------------------------------------------

- preg_replace($reg_exp, $replacement, $string)
- Refer to the text in a capture group using \1, \2, etc.
    /ab(c)/ => \1de => "abc" ==> cde
    /(\w+) and (\w+) => \1 or \2 => "Jack and Jill" ==> "Jack or Jill"

--------------------------------------------------------------------------------
Get the Controller and Action from a URL with a Variable Structure
--------------------------------------------------------------------------------

- Would be nice to specify where the controller and action parts occur
    - Popular MVC frameworks have capabilities like this

--------------------------------------------------------------------------------
Add custom variables of any format to the 
URL
--------------------------------------------------------------------------------

- What if we want to add an id to the URL?
- Define an optional regex for the variable
    - $router->add('{controller}/{id:\d+}/{action}')