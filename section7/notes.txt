================================================================================
Introduction to Advanced Routing: More flexible routes using patterns
================================================================================

--------------------------------------------------------------------------------
How to do Complex String Compaisons: An Introduction to Regular Expressions
--------------------------------------------------------------------------------

A regex defines a pattern of characters
    - Can match part of a string
    - Can be used for advances matching and replacing
        - Match or replace just numbers
        - See if a string contains a valid email address

Instead of comparing to fixed string, we compare to pattern
    - if ($name == "Dave") => if (preg_match("/Dave/", $name))

Regular expression:
    /abc/ => "abc" => Match
    /abc/ => "abcde" => Match
    /abc/ => "bcdea" => No Match
    /2:3/ => "12:34:56" => Match

--------------------------------------------------------------------------------
Using Special Characters in Regex: Matching the Start and End
--------------------------------------------------------------------------------

- ^ - Start of string
- $ - End of string
    /^abc/ => "abc" => Match
    /^abc/ => "123abc" => Not Match
    /abc$/ => "123abc" => Match
    /^abc$/ => "abc" => Match
    /^abc$/ => "abcdef" =< Not match

--------------------------------------------------------------------------------
Matching Patterns: Character sets in regular expressions
--------------------------------------------------------------------------------

- [] - Match one of any of the characters in the brackets
    /a[123]b/ => "a2b" => Match
    /a[123]b/ => "a4b" => Not Match
    /a[123]+b/ => "a321322b" => Match
    /a[1-5]b/ => "a2b" => Match
    /a[1-5]b/ => "a6b" => Not Match
    /[a-z0-9 ]+/ => "hello there" => Match
- [^ ] - Negate the character class: match any character except for the ones specified
    /a[^123]b/ => "a2b" => Not Match
    /a[^123]b/ => "a4b" => Match
    /[^a-z]+/ => "hello" => Not match
    /[^a-z]+/ => "HELLO" => Not match
- [a-z0-9 ] - Ranges, any single letters a-z or 0-9 or space

--------------------------------------------------------------------------------
Repetition in Regular Expressions
--------------------------------------------------------------------------------

- * - Look for character repeated 0 or more times
- + - Look for character repeated 1 or more times
    /a*bc/ => "abc" => Match
    /a+bc/ => "abc" => Match
    /a*bc/ => "bc" => Match
    /a+bc/ => "bc" => Not Match
    /a+bc/ => "aaaaaaabc" => Match




Matacharacters
    - Used to match a specific type of character
    - Common includes
        \d (digit from 0-9)
        \w (any character from a to z, A to Z, 0 to 9)
        \s (any whitespace character)

More regular expressions:
    /ab\d/ => "ab23" => Match
    /abc\d/ => "ab23" => No match
    /\d\d/ => "ab23" => Match
    /\w\s\d/ => "ab 34" => Match
